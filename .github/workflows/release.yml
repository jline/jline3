#
# Release workflow
#
# Secrets:
# - GPG_SIGNING_KEY (private key with armor)
# - GPG_PASSPHRASE (the private key passphrase)
# - GPG_KEY_FINGERPRINT (fingerprint and not hash)
# - MAVEN_USER (token user generated by central.sonatype.org)
# - MAVEN_PASSWORD (token password generated by central.sonatype.org)
#

name: Manual Maven Release

on:
  push:
    tags:
      - '[0-9]*.[0-9]*.[0-9]*'

jobs:
  release:
    name: Release to Maven Central
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:

      - name: Checkout ${{ github.ref_name }}
        uses: actions/checkout@v5
        with:
          fetch-depth: 0          # Full history for git describe
          ref: ${{ github.ref }}  # Ensures we're on the exact tag when triggered by tag push

      - name: Verify tag state
        id: version
        run: |
          git fetch --tags
          echo "All recent tags:"
          git tag -l --sort=version:refname | head -5
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Git describe: $(git describe --tags --always)"
          echo "Tag: ${GITHUB_REF#refs/tags/}"
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 22
          cache: maven

      - name: Release
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          MAVEN_GPG_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          MAVEN_GPG_KEY_FINGERPRINT: ${{ secrets.GPG_KEY_FINGERPRINT }}
          MAVEN_USER: ${{ secrets.MAVEN_USER }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        run: |
          ./mvnw -B deploy -Dnjord.autoPublish -Pbundle,javadoc,format-check,sign -s .github/release-settings.xml 

      - name: Post release
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          gh extension install valeriobelli/gh-milestone
          version=${{ steps.version.outputs.version }}
          echo "Trying to find milestone $version"
          milestone=$(gh milestone list --json id,title,state  --jq "map_values(select(.title == \"${version}\" and .state == \"OPEN\")).[].number")
          if [ ! -z "$milestone" ]; then
              echo "Found milestone $version, closing it"
              gh milestone edit $milestone --state closed 
          fi

          # Parse semantic version and increment patch version
          if [[ $version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
  
            # Increment patch version for next development cycle
            next_patch=$((patch + 1))
            next_version="${major}.${minor}.${next_patch}"
  
            echo "Preparing development $next_version"
            echo "Trying to find milestone $next_version"
  
            milestone=$(gh milestone list --json id,title,state --jq "map_values(select(.title == \"${next_version}\" and .state == \"OPEN\")).[].number")
            if [ -z "$milestone" ]; then
              echo "Creating milestone $next_version"
              gh milestone create --title $next_version
            fi
          else
            echo "ERROR: Version $version is not a valid semantic version (x.y.z)"
            exit 1
          fi          
          
          name=$(./mvnw -q -DforceStdout --raw-streams help:evaluate -N -Dexpression=project.name)
          version=${{ steps.version.outputs.version }}
          echo "Creating release \"$name $version\" from tag"
          gh release create $version --verify-tag --notes-from-tag --title "$name $version"
